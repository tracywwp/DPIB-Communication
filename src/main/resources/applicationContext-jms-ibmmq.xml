<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
     http://www.springframework.org/schema/context   
     http://www.springframework.org/schema/context/spring-context-3.0.xsd   
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:component-scan base-package="com.spdb.ib.dpib.mq" />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/mqconnect.properties</value>
				<value>classpath*:/config.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
    <bean id="targetConnectionFactory" class="com.ibm.mq.jms.MQQueueConnectionFactory">
		<property name="hostName" value="${queue.manager.host.send}" />
		<property name="port" value="${app.mq.port}" />
		 <property name="channel" value="${app.mq.channel}" />
		<!-- <property name="CCSID" value="820" /> -->
		<property name="queueManager" value="${queue.manager.send}" />
		<!--0访问本地  1访问远程  -->
		<property name="transportType" value="${app.mq.transportType}" />
	</bean>
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="targetConnectionFactory" />
		 <property name="sessionCacheSize">
            <value>1000</value>
        </property>
	</bean>
    
	<!--这个是队列目的地BSTASA_1 接受队列-->
	<bean id="adapterQueue" class="com.ibm.mq.jms.MQQueue">
		<constructor-arg>
			<value>BSTASA_1</value>
		</constructor-arg>
	</bean>
	<!--这个是队列目的地 XMSGTOPFGG_A1 发送队列-->
	<bean id="sendQueue" class="com.ibm.mq.jms.MQQueue">
		<constructor-arg>
			<value>XMSGTOPFGG_A1</value>
		</constructor-arg>
	</bean>
	<!--此为接收MQ数据用的配置-->
	 <!-- <bean id="receiveMsgJmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="adapterQueue" />
		<property name="cacheLevelName" value="CACHE_CONSUMER" />
		<property name="messageListener">
			<bean class="com.spdb.ib.dpib.mq.jms.listener.ReceiveMsgListener" />
		</property>
		<property name="taskExecutor" ref="taskExecutor" />
		<property name="concurrentConsumers" value="10" />
		<property name="sessionTransacted" value="true"/> 
		<property name="transactionManager" ref="transactionManager"/>
	</bean>   -->
	<!--WizRtf2Html Charset=0 -->    <!-- jms监听线程池 提高效率-->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="6" /> 
    <property name="maxPoolSize" value="100" />  
    <property name="queueCapacity" value="1000" />  
    <property name="keepAliveSeconds" value="300" /> 
    <property name="rejectedExecutionHandler">  
        <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->  
        <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->  
        <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->  
        <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行   -->
        <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />  
    </property> 
	</bean>
    
</beans>  